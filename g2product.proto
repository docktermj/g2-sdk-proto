syntax = "proto3";
package g2product;

option go_package = "github.com/senzing/g2-sdk-go-grpc/g2product";
option java_multiple_files = true;
option java_package = "com.senzing.g2.engine.grpc.G2Product";
option java_outer_classname = "G2ProductProto";

service G2Diagnostic {
  rpc ClearLastException (ClearLastExceptionRequest) returns (ClearLastExceptionResponse) {}
  rpc Destroy (DestroyRequest) returns (DestroyResponse) {}
  rpc GetLastException (GetLastExceptionRequest) returns (GetLastExceptionResponse) {}
  rpc GetLastExceptionCode (GetLastExceptionCodeRequest) returns (GetLastExceptionCodeResponse) {}
  rpc Init (InitRequest) returns (InitResponse) {}
  rpc License (LicenseRequest) returns (LicenseResponse) {}
  rpc ValidateLicenseFile (ValidateLicenseFileRequest) returns (ValidateLicenseFileResponse) {}
  rpc ValidateLicenseStringBase64 (ValidateLicenseStringBase64Request) returns (ValidateLicenseStringBase64Response) {}
  rpc Version (VersionRequest) returns (VersionResponse) {}
}

message ClearLastExceptionRequest {}

message ClearLastExceptionResponse {}

message DestroyRequest {}

message DestroyResponse {}

message GetLastExceptionRequest {}

message GetLastExceptionResponse {
  string result = 1;
}

message GetLastExceptionCodeRequest {}

message GetLastExceptionCodeResponse {
  int32 configID = 1;
}

message InitRequest {
  string moduleName = 1;
  string iniParams = 2;
  int32 verboseLogging = 3;
}

message InitResponse {}

message LicenseRequest {}

message LicenseResponse {
  string result = 1;
}

message ValidateLicenseFileRequest {
  string licenseFilePath = 1;
}

message ValidateLicenseFileResponse {
  string result = 1;
}

message ValidateLicenseStringBase64Request {
  string licenseString = 1;
}

message ValidateLicenseStringBase64Response {
  string result = 1;
}

message VersionRequest {}

message VersionResponse {
  string result = 1;
}
