// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: g2hasher.proto

#include "g2hasher.pb.h"
#include "g2hasher.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace g2hasher {

static const char* G2Diagnostic_method_names[] = {
  "/g2hasher.G2Diagnostic/ClearLastException",
  "/g2hasher.G2Diagnostic/Destroy",
  "/g2hasher.G2Diagnostic/ExportTokenLibrary",
  "/g2hasher.G2Diagnostic/GetLastException",
  "/g2hasher.G2Diagnostic/GetLastExceptionCode",
  "/g2hasher.G2Diagnostic/Init",
  "/g2hasher.G2Diagnostic/InitWithConfig",
  "/g2hasher.G2Diagnostic/Process",
};

std::unique_ptr< G2Diagnostic::Stub> G2Diagnostic::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< G2Diagnostic::Stub> stub(new G2Diagnostic::Stub(channel, options));
  return stub;
}

G2Diagnostic::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ClearLastException_(G2Diagnostic_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(G2Diagnostic_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportTokenLibrary_(G2Diagnostic_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastException_(G2Diagnostic_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastExceptionCode_(G2Diagnostic_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Init_(G2Diagnostic_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitWithConfig_(G2Diagnostic_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Process_(G2Diagnostic_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status G2Diagnostic::Stub::ClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::g2hasher::ClearLastExceptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2hasher::ClearLastExceptionRequest, ::g2hasher::ClearLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearLastException_, context, request, response);
}

void G2Diagnostic::Stub::async::ClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest* request, ::g2hasher::ClearLastExceptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2hasher::ClearLastExceptionRequest, ::g2hasher::ClearLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearLastException_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::ClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest* request, ::g2hasher::ClearLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearLastException_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::ClearLastExceptionResponse>* G2Diagnostic::Stub::PrepareAsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2hasher::ClearLastExceptionResponse, ::g2hasher::ClearLastExceptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearLastException_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::ClearLastExceptionResponse>* G2Diagnostic::Stub::AsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearLastExceptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::Destroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::g2hasher::DestroyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2hasher::DestroyRequest, ::g2hasher::DestroyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void G2Diagnostic::Stub::async::Destroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest* request, ::g2hasher::DestroyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2hasher::DestroyRequest, ::g2hasher::DestroyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::Destroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest* request, ::g2hasher::DestroyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::DestroyResponse>* G2Diagnostic::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2hasher::DestroyResponse, ::g2hasher::DestroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::DestroyResponse>* G2Diagnostic::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::ExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::g2hasher::ExportTokenLibraryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2hasher::ExportTokenLibraryRequest, ::g2hasher::ExportTokenLibraryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportTokenLibrary_, context, request, response);
}

void G2Diagnostic::Stub::async::ExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest* request, ::g2hasher::ExportTokenLibraryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2hasher::ExportTokenLibraryRequest, ::g2hasher::ExportTokenLibraryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportTokenLibrary_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::ExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest* request, ::g2hasher::ExportTokenLibraryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportTokenLibrary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::ExportTokenLibraryResponse>* G2Diagnostic::Stub::PrepareAsyncExportTokenLibraryRaw(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2hasher::ExportTokenLibraryResponse, ::g2hasher::ExportTokenLibraryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportTokenLibrary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::ExportTokenLibraryResponse>* G2Diagnostic::Stub::AsyncExportTokenLibraryRaw(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportTokenLibraryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::GetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::g2hasher::GetLastExceptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2hasher::GetLastExceptionRequest, ::g2hasher::GetLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLastException_, context, request, response);
}

void G2Diagnostic::Stub::async::GetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest* request, ::g2hasher::GetLastExceptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2hasher::GetLastExceptionRequest, ::g2hasher::GetLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastException_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::GetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest* request, ::g2hasher::GetLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastException_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionResponse>* G2Diagnostic::Stub::PrepareAsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2hasher::GetLastExceptionResponse, ::g2hasher::GetLastExceptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLastException_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionResponse>* G2Diagnostic::Stub::AsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLastExceptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::GetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::g2hasher::GetLastExceptionCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2hasher::GetLastExceptionCodeRequest, ::g2hasher::GetLastExceptionCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLastExceptionCode_, context, request, response);
}

void G2Diagnostic::Stub::async::GetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest* request, ::g2hasher::GetLastExceptionCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2hasher::GetLastExceptionCodeRequest, ::g2hasher::GetLastExceptionCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastExceptionCode_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::GetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest* request, ::g2hasher::GetLastExceptionCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastExceptionCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionCodeResponse>* G2Diagnostic::Stub::PrepareAsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2hasher::GetLastExceptionCodeResponse, ::g2hasher::GetLastExceptionCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLastExceptionCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionCodeResponse>* G2Diagnostic::Stub::AsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLastExceptionCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::Init(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::g2hasher::InitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2hasher::InitRequest, ::g2hasher::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void G2Diagnostic::Stub::async::Init(::grpc::ClientContext* context, const ::g2hasher::InitRequest* request, ::g2hasher::InitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2hasher::InitRequest, ::g2hasher::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::Init(::grpc::ClientContext* context, const ::g2hasher::InitRequest* request, ::g2hasher::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::InitResponse>* G2Diagnostic::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2hasher::InitResponse, ::g2hasher::InitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::InitResponse>* G2Diagnostic::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::InitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::g2hasher::InitWithConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2hasher::InitWithConfigRequest, ::g2hasher::InitWithConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitWithConfig_, context, request, response);
}

void G2Diagnostic::Stub::async::InitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest* request, ::g2hasher::InitWithConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2hasher::InitWithConfigRequest, ::g2hasher::InitWithConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitWithConfig_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::InitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest* request, ::g2hasher::InitWithConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitWithConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::InitWithConfigResponse>* G2Diagnostic::Stub::PrepareAsyncInitWithConfigRaw(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2hasher::InitWithConfigResponse, ::g2hasher::InitWithConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitWithConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::InitWithConfigResponse>* G2Diagnostic::Stub::AsyncInitWithConfigRaw(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitWithConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::Process(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::g2hasher::ProcessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2hasher::ProcessRequest, ::g2hasher::ProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Process_, context, request, response);
}

void G2Diagnostic::Stub::async::Process(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest* request, ::g2hasher::ProcessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2hasher::ProcessRequest, ::g2hasher::ProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Process_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::Process(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest* request, ::g2hasher::ProcessResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Process_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::ProcessResponse>* G2Diagnostic::Stub::PrepareAsyncProcessRaw(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2hasher::ProcessResponse, ::g2hasher::ProcessRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Process_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2hasher::ProcessResponse>* G2Diagnostic::Stub::AsyncProcessRaw(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessRaw(context, request, cq);
  result->StartCall();
  return result;
}

G2Diagnostic::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2hasher::ClearLastExceptionRequest, ::g2hasher::ClearLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2hasher::ClearLastExceptionRequest* req,
             ::g2hasher::ClearLastExceptionResponse* resp) {
               return service->ClearLastException(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2hasher::DestroyRequest, ::g2hasher::DestroyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2hasher::DestroyRequest* req,
             ::g2hasher::DestroyResponse* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2hasher::ExportTokenLibraryRequest, ::g2hasher::ExportTokenLibraryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2hasher::ExportTokenLibraryRequest* req,
             ::g2hasher::ExportTokenLibraryResponse* resp) {
               return service->ExportTokenLibrary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2hasher::GetLastExceptionRequest, ::g2hasher::GetLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2hasher::GetLastExceptionRequest* req,
             ::g2hasher::GetLastExceptionResponse* resp) {
               return service->GetLastException(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2hasher::GetLastExceptionCodeRequest, ::g2hasher::GetLastExceptionCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2hasher::GetLastExceptionCodeRequest* req,
             ::g2hasher::GetLastExceptionCodeResponse* resp) {
               return service->GetLastExceptionCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2hasher::InitRequest, ::g2hasher::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2hasher::InitRequest* req,
             ::g2hasher::InitResponse* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2hasher::InitWithConfigRequest, ::g2hasher::InitWithConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2hasher::InitWithConfigRequest* req,
             ::g2hasher::InitWithConfigResponse* resp) {
               return service->InitWithConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2hasher::ProcessRequest, ::g2hasher::ProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2hasher::ProcessRequest* req,
             ::g2hasher::ProcessResponse* resp) {
               return service->Process(ctx, req, resp);
             }, this)));
}

G2Diagnostic::Service::~Service() {
}

::grpc::Status G2Diagnostic::Service::ClearLastException(::grpc::ServerContext* context, const ::g2hasher::ClearLastExceptionRequest* request, ::g2hasher::ClearLastExceptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::Destroy(::grpc::ServerContext* context, const ::g2hasher::DestroyRequest* request, ::g2hasher::DestroyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::ExportTokenLibrary(::grpc::ServerContext* context, const ::g2hasher::ExportTokenLibraryRequest* request, ::g2hasher::ExportTokenLibraryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::GetLastException(::grpc::ServerContext* context, const ::g2hasher::GetLastExceptionRequest* request, ::g2hasher::GetLastExceptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::GetLastExceptionCode(::grpc::ServerContext* context, const ::g2hasher::GetLastExceptionCodeRequest* request, ::g2hasher::GetLastExceptionCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::Init(::grpc::ServerContext* context, const ::g2hasher::InitRequest* request, ::g2hasher::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::InitWithConfig(::grpc::ServerContext* context, const ::g2hasher::InitWithConfigRequest* request, ::g2hasher::InitWithConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::Process(::grpc::ServerContext* context, const ::g2hasher::ProcessRequest* request, ::g2hasher::ProcessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace g2hasher

