// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: g2config.proto
#ifndef GRPC_g2config_2eproto__INCLUDED
#define GRPC_g2config_2eproto__INCLUDED

#include "g2config.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace g2config {

class G2Diagnostic final {
 public:
  static constexpr char const* service_full_name() {
    return "g2config.G2Diagnostic";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::g2config::AddDataSourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::AddDataSourceResponse>> AsyncAddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::AddDataSourceResponse>>(AsyncAddDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::AddDataSourceResponse>> PrepareAsyncAddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::AddDataSourceResponse>>(PrepareAsyncAddDataSourceRaw(context, request, cq));
    }
    virtual ::grpc::Status ClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::g2config::ClearLastExceptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ClearLastExceptionResponse>> AsyncClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ClearLastExceptionResponse>>(AsyncClearLastExceptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ClearLastExceptionResponse>> PrepareAsyncClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ClearLastExceptionResponse>>(PrepareAsyncClearLastExceptionRaw(context, request, cq));
    }
    virtual ::grpc::Status Close(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::g2config::CloseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CloseResponse>> AsyncClose(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CloseResponse>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CloseResponse>> PrepareAsyncClose(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CloseResponse>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::g2config::CreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::g2config::DeleteDataSourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DeleteDataSourceResponse>> AsyncDeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DeleteDataSourceResponse>>(AsyncDeleteDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DeleteDataSourceResponse>> PrepareAsyncDeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DeleteDataSourceResponse>>(PrepareAsyncDeleteDataSourceRaw(context, request, cq));
    }
    virtual ::grpc::Status Destroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::g2config::DestroyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DestroyResponse>> AsyncDestroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DestroyResponse>>(AsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DestroyResponse>> PrepareAsyncDestroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DestroyResponse>>(PrepareAsyncDestroyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::g2config::GetLastExceptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionResponse>> AsyncGetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionResponse>>(AsyncGetLastExceptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionResponse>> PrepareAsyncGetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionResponse>>(PrepareAsyncGetLastExceptionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::g2config::GetLastExceptionCodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionCodeResponse>> AsyncGetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionCodeResponse>>(AsyncGetLastExceptionCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionCodeResponse>> PrepareAsyncGetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionCodeResponse>>(PrepareAsyncGetLastExceptionCodeRaw(context, request, cq));
    }
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::g2config::InitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    virtual ::grpc::Status ListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::g2config::ListDataSourcesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ListDataSourcesResponse>> AsyncListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ListDataSourcesResponse>>(AsyncListDataSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ListDataSourcesResponse>> PrepareAsyncListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ListDataSourcesResponse>>(PrepareAsyncListDataSourcesRaw(context, request, cq));
    }
    virtual ::grpc::Status Load(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::g2config::LoadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::LoadResponse>> AsyncLoad(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::LoadResponse>>(AsyncLoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::LoadResponse>> PrepareAsyncLoad(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::LoadResponse>>(PrepareAsyncLoadRaw(context, request, cq));
    }
    virtual ::grpc::Status Save(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::g2config::SaveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::SaveResponse>> AsyncSave(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::SaveResponse>>(AsyncSaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::SaveResponse>> PrepareAsyncSave(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2config::SaveResponse>>(PrepareAsyncSaveRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest* request, ::g2config::AddDataSourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest* request, ::g2config::AddDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest* request, ::g2config::ClearLastExceptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest* request, ::g2config::ClearLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Close(::grpc::ClientContext* context, const ::g2config::CloseRequest* request, ::g2config::CloseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Close(::grpc::ClientContext* context, const ::g2config::CloseRequest* request, ::g2config::CloseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::g2config::CreateRequest* request, ::g2config::CreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::g2config::CreateRequest* request, ::g2config::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest* request, ::g2config::DeleteDataSourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest* request, ::g2config::DeleteDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Destroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest* request, ::g2config::DestroyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Destroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest* request, ::g2config::DestroyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest* request, ::g2config::GetLastExceptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest* request, ::g2config::GetLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest* request, ::g2config::GetLastExceptionCodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest* request, ::g2config::GetLastExceptionCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::g2config::InitRequest* request, ::g2config::InitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::g2config::InitRequest* request, ::g2config::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest* request, ::g2config::ListDataSourcesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest* request, ::g2config::ListDataSourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Load(::grpc::ClientContext* context, const ::g2config::LoadRequest* request, ::g2config::LoadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Load(::grpc::ClientContext* context, const ::g2config::LoadRequest* request, ::g2config::LoadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Save(::grpc::ClientContext* context, const ::g2config::SaveRequest* request, ::g2config::SaveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Save(::grpc::ClientContext* context, const ::g2config::SaveRequest* request, ::g2config::SaveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::AddDataSourceResponse>* AsyncAddDataSourceRaw(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::AddDataSourceResponse>* PrepareAsyncAddDataSourceRaw(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ClearLastExceptionResponse>* AsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ClearLastExceptionResponse>* PrepareAsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CloseResponse>* AsyncCloseRaw(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CloseResponse>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DeleteDataSourceResponse>* AsyncDeleteDataSourceRaw(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DeleteDataSourceResponse>* PrepareAsyncDeleteDataSourceRaw(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DestroyResponse>* AsyncDestroyRaw(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::DestroyResponse>* PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionResponse>* AsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionResponse>* PrepareAsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionCodeResponse>* AsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::GetLastExceptionCodeResponse>* PrepareAsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ListDataSourcesResponse>* AsyncListDataSourcesRaw(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::ListDataSourcesResponse>* PrepareAsyncListDataSourcesRaw(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::LoadResponse>* AsyncLoadRaw(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::LoadResponse>* PrepareAsyncLoadRaw(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::SaveResponse>* AsyncSaveRaw(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2config::SaveResponse>* PrepareAsyncSaveRaw(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::g2config::AddDataSourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::AddDataSourceResponse>> AsyncAddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::AddDataSourceResponse>>(AsyncAddDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::AddDataSourceResponse>> PrepareAsyncAddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::AddDataSourceResponse>>(PrepareAsyncAddDataSourceRaw(context, request, cq));
    }
    ::grpc::Status ClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::g2config::ClearLastExceptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::ClearLastExceptionResponse>> AsyncClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::ClearLastExceptionResponse>>(AsyncClearLastExceptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::ClearLastExceptionResponse>> PrepareAsyncClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::ClearLastExceptionResponse>>(PrepareAsyncClearLastExceptionRaw(context, request, cq));
    }
    ::grpc::Status Close(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::g2config::CloseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::CloseResponse>> AsyncClose(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::CloseResponse>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::CloseResponse>> PrepareAsyncClose(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::CloseResponse>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::g2config::CreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status DeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::g2config::DeleteDataSourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::DeleteDataSourceResponse>> AsyncDeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::DeleteDataSourceResponse>>(AsyncDeleteDataSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::DeleteDataSourceResponse>> PrepareAsyncDeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::DeleteDataSourceResponse>>(PrepareAsyncDeleteDataSourceRaw(context, request, cq));
    }
    ::grpc::Status Destroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::g2config::DestroyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::DestroyResponse>> AsyncDestroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::DestroyResponse>>(AsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::DestroyResponse>> PrepareAsyncDestroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::DestroyResponse>>(PrepareAsyncDestroyRaw(context, request, cq));
    }
    ::grpc::Status GetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::g2config::GetLastExceptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionResponse>> AsyncGetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionResponse>>(AsyncGetLastExceptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionResponse>> PrepareAsyncGetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionResponse>>(PrepareAsyncGetLastExceptionRaw(context, request, cq));
    }
    ::grpc::Status GetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::g2config::GetLastExceptionCodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionCodeResponse>> AsyncGetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionCodeResponse>>(AsyncGetLastExceptionCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionCodeResponse>> PrepareAsyncGetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionCodeResponse>>(PrepareAsyncGetLastExceptionCodeRaw(context, request, cq));
    }
    ::grpc::Status Init(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::g2config::InitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    ::grpc::Status ListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::g2config::ListDataSourcesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::ListDataSourcesResponse>> AsyncListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::ListDataSourcesResponse>>(AsyncListDataSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::ListDataSourcesResponse>> PrepareAsyncListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::ListDataSourcesResponse>>(PrepareAsyncListDataSourcesRaw(context, request, cq));
    }
    ::grpc::Status Load(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::g2config::LoadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::LoadResponse>> AsyncLoad(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::LoadResponse>>(AsyncLoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::LoadResponse>> PrepareAsyncLoad(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::LoadResponse>>(PrepareAsyncLoadRaw(context, request, cq));
    }
    ::grpc::Status Save(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::g2config::SaveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::SaveResponse>> AsyncSave(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::SaveResponse>>(AsyncSaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::SaveResponse>> PrepareAsyncSave(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2config::SaveResponse>>(PrepareAsyncSaveRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest* request, ::g2config::AddDataSourceResponse* response, std::function<void(::grpc::Status)>) override;
      void AddDataSource(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest* request, ::g2config::AddDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest* request, ::g2config::ClearLastExceptionResponse* response, std::function<void(::grpc::Status)>) override;
      void ClearLastException(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest* request, ::g2config::ClearLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Close(::grpc::ClientContext* context, const ::g2config::CloseRequest* request, ::g2config::CloseResponse* response, std::function<void(::grpc::Status)>) override;
      void Close(::grpc::ClientContext* context, const ::g2config::CloseRequest* request, ::g2config::CloseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Create(::grpc::ClientContext* context, const ::g2config::CreateRequest* request, ::g2config::CreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::g2config::CreateRequest* request, ::g2config::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest* request, ::g2config::DeleteDataSourceResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteDataSource(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest* request, ::g2config::DeleteDataSourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Destroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest* request, ::g2config::DestroyResponse* response, std::function<void(::grpc::Status)>) override;
      void Destroy(::grpc::ClientContext* context, const ::g2config::DestroyRequest* request, ::g2config::DestroyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest* request, ::g2config::GetLastExceptionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLastException(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest* request, ::g2config::GetLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest* request, ::g2config::GetLastExceptionCodeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLastExceptionCode(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest* request, ::g2config::GetLastExceptionCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Init(::grpc::ClientContext* context, const ::g2config::InitRequest* request, ::g2config::InitResponse* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::g2config::InitRequest* request, ::g2config::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest* request, ::g2config::ListDataSourcesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDataSources(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest* request, ::g2config::ListDataSourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Load(::grpc::ClientContext* context, const ::g2config::LoadRequest* request, ::g2config::LoadResponse* response, std::function<void(::grpc::Status)>) override;
      void Load(::grpc::ClientContext* context, const ::g2config::LoadRequest* request, ::g2config::LoadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Save(::grpc::ClientContext* context, const ::g2config::SaveRequest* request, ::g2config::SaveResponse* response, std::function<void(::grpc::Status)>) override;
      void Save(::grpc::ClientContext* context, const ::g2config::SaveRequest* request, ::g2config::SaveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::g2config::AddDataSourceResponse>* AsyncAddDataSourceRaw(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::AddDataSourceResponse>* PrepareAsyncAddDataSourceRaw(::grpc::ClientContext* context, const ::g2config::AddDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::ClearLastExceptionResponse>* AsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::ClearLastExceptionResponse>* PrepareAsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2config::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::CloseResponse>* AsyncCloseRaw(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::CloseResponse>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::g2config::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::g2config::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::DeleteDataSourceResponse>* AsyncDeleteDataSourceRaw(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::DeleteDataSourceResponse>* PrepareAsyncDeleteDataSourceRaw(::grpc::ClientContext* context, const ::g2config::DeleteDataSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::DestroyResponse>* AsyncDestroyRaw(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::DestroyResponse>* PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::g2config::DestroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionResponse>* AsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionResponse>* PrepareAsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2config::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionCodeResponse>* AsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::GetLastExceptionCodeResponse>* PrepareAsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2config::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::g2config::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::ListDataSourcesResponse>* AsyncListDataSourcesRaw(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::ListDataSourcesResponse>* PrepareAsyncListDataSourcesRaw(::grpc::ClientContext* context, const ::g2config::ListDataSourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::LoadResponse>* AsyncLoadRaw(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::LoadResponse>* PrepareAsyncLoadRaw(::grpc::ClientContext* context, const ::g2config::LoadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::SaveResponse>* AsyncSaveRaw(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2config::SaveResponse>* PrepareAsyncSaveRaw(::grpc::ClientContext* context, const ::g2config::SaveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddDataSource_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearLastException_;
    const ::grpc::internal::RpcMethod rpcmethod_Close_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDataSource_;
    const ::grpc::internal::RpcMethod rpcmethod_Destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastException_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastExceptionCode_;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDataSources_;
    const ::grpc::internal::RpcMethod rpcmethod_Load_;
    const ::grpc::internal::RpcMethod rpcmethod_Save_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddDataSource(::grpc::ServerContext* context, const ::g2config::AddDataSourceRequest* request, ::g2config::AddDataSourceResponse* response);
    virtual ::grpc::Status ClearLastException(::grpc::ServerContext* context, const ::g2config::ClearLastExceptionRequest* request, ::g2config::ClearLastExceptionResponse* response);
    virtual ::grpc::Status Close(::grpc::ServerContext* context, const ::g2config::CloseRequest* request, ::g2config::CloseResponse* response);
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::g2config::CreateRequest* request, ::g2config::CreateResponse* response);
    virtual ::grpc::Status DeleteDataSource(::grpc::ServerContext* context, const ::g2config::DeleteDataSourceRequest* request, ::g2config::DeleteDataSourceResponse* response);
    virtual ::grpc::Status Destroy(::grpc::ServerContext* context, const ::g2config::DestroyRequest* request, ::g2config::DestroyResponse* response);
    virtual ::grpc::Status GetLastException(::grpc::ServerContext* context, const ::g2config::GetLastExceptionRequest* request, ::g2config::GetLastExceptionResponse* response);
    virtual ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* context, const ::g2config::GetLastExceptionCodeRequest* request, ::g2config::GetLastExceptionCodeResponse* response);
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::g2config::InitRequest* request, ::g2config::InitResponse* response);
    virtual ::grpc::Status ListDataSources(::grpc::ServerContext* context, const ::g2config::ListDataSourcesRequest* request, ::g2config::ListDataSourcesResponse* response);
    virtual ::grpc::Status Load(::grpc::ServerContext* context, const ::g2config::LoadRequest* request, ::g2config::LoadResponse* response);
    virtual ::grpc::Status Save(::grpc::ServerContext* context, const ::g2config::SaveRequest* request, ::g2config::SaveResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddDataSource() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDataSource(::grpc::ServerContext* /*context*/, const ::g2config::AddDataSourceRequest* /*request*/, ::g2config::AddDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddDataSource(::grpc::ServerContext* context, ::g2config::AddDataSourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::AddDataSourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearLastException() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2config::ClearLastExceptionRequest* /*request*/, ::g2config::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearLastException(::grpc::ServerContext* context, ::g2config::ClearLastExceptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::ClearLastExceptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Close() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::g2config::CloseRequest* /*request*/, ::g2config::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::g2config::CloseRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::CloseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::g2config::CreateRequest* /*request*/, ::g2config::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::g2config::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::CreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDataSource() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataSource(::grpc::ServerContext* /*context*/, const ::g2config::DeleteDataSourceRequest* /*request*/, ::g2config::DeleteDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDataSource(::grpc::ServerContext* context, ::g2config::DeleteDataSourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::DeleteDataSourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Destroy() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2config::DestroyRequest* /*request*/, ::g2config::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroy(::grpc::ServerContext* context, ::g2config::DestroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::DestroyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastException() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionRequest* /*request*/, ::g2config::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastException(::grpc::ServerContext* context, ::g2config::GetLastExceptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::GetLastExceptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionCodeRequest* /*request*/, ::g2config::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastExceptionCode(::grpc::ServerContext* context, ::g2config::GetLastExceptionCodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::GetLastExceptionCodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2config::InitRequest* /*request*/, ::g2config::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::g2config::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::InitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDataSources() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::g2config::ListDataSourcesRequest* /*request*/, ::g2config::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDataSources(::grpc::ServerContext* context, ::g2config::ListDataSourcesRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::ListDataSourcesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Load() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::g2config::LoadRequest* /*request*/, ::g2config::LoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoad(::grpc::ServerContext* context, ::g2config::LoadRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::LoadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Save() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::g2config::SaveRequest* /*request*/, ::g2config::SaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSave(::grpc::ServerContext* context, ::g2config::SaveRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2config::SaveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddDataSource<WithAsyncMethod_ClearLastException<WithAsyncMethod_Close<WithAsyncMethod_Create<WithAsyncMethod_DeleteDataSource<WithAsyncMethod_Destroy<WithAsyncMethod_GetLastException<WithAsyncMethod_GetLastExceptionCode<WithAsyncMethod_Init<WithAsyncMethod_ListDataSources<WithAsyncMethod_Load<WithAsyncMethod_Save<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddDataSource() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::AddDataSourceRequest, ::g2config::AddDataSourceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::AddDataSourceRequest* request, ::g2config::AddDataSourceResponse* response) { return this->AddDataSource(context, request, response); }));}
    void SetMessageAllocatorFor_AddDataSource(
        ::grpc::MessageAllocator< ::g2config::AddDataSourceRequest, ::g2config::AddDataSourceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::AddDataSourceRequest, ::g2config::AddDataSourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDataSource(::grpc::ServerContext* /*context*/, const ::g2config::AddDataSourceRequest* /*request*/, ::g2config::AddDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::AddDataSourceRequest* /*request*/, ::g2config::AddDataSourceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClearLastException() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::ClearLastExceptionRequest, ::g2config::ClearLastExceptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::ClearLastExceptionRequest* request, ::g2config::ClearLastExceptionResponse* response) { return this->ClearLastException(context, request, response); }));}
    void SetMessageAllocatorFor_ClearLastException(
        ::grpc::MessageAllocator< ::g2config::ClearLastExceptionRequest, ::g2config::ClearLastExceptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::ClearLastExceptionRequest, ::g2config::ClearLastExceptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2config::ClearLastExceptionRequest* /*request*/, ::g2config::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearLastException(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::ClearLastExceptionRequest* /*request*/, ::g2config::ClearLastExceptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Close() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::CloseRequest, ::g2config::CloseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::CloseRequest* request, ::g2config::CloseResponse* response) { return this->Close(context, request, response); }));}
    void SetMessageAllocatorFor_Close(
        ::grpc::MessageAllocator< ::g2config::CloseRequest, ::g2config::CloseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::CloseRequest, ::g2config::CloseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::g2config::CloseRequest* /*request*/, ::g2config::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::CloseRequest* /*request*/, ::g2config::CloseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::CreateRequest, ::g2config::CreateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::CreateRequest* request, ::g2config::CreateResponse* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::g2config::CreateRequest, ::g2config::CreateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::CreateRequest, ::g2config::CreateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::g2config::CreateRequest* /*request*/, ::g2config::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::CreateRequest* /*request*/, ::g2config::CreateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDataSource() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::DeleteDataSourceRequest, ::g2config::DeleteDataSourceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::DeleteDataSourceRequest* request, ::g2config::DeleteDataSourceResponse* response) { return this->DeleteDataSource(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDataSource(
        ::grpc::MessageAllocator< ::g2config::DeleteDataSourceRequest, ::g2config::DeleteDataSourceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::DeleteDataSourceRequest, ::g2config::DeleteDataSourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataSource(::grpc::ServerContext* /*context*/, const ::g2config::DeleteDataSourceRequest* /*request*/, ::g2config::DeleteDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::DeleteDataSourceRequest* /*request*/, ::g2config::DeleteDataSourceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Destroy() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::DestroyRequest, ::g2config::DestroyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::DestroyRequest* request, ::g2config::DestroyResponse* response) { return this->Destroy(context, request, response); }));}
    void SetMessageAllocatorFor_Destroy(
        ::grpc::MessageAllocator< ::g2config::DestroyRequest, ::g2config::DestroyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::DestroyRequest, ::g2config::DestroyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2config::DestroyRequest* /*request*/, ::g2config::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::DestroyRequest* /*request*/, ::g2config::DestroyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLastException() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::GetLastExceptionRequest, ::g2config::GetLastExceptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::GetLastExceptionRequest* request, ::g2config::GetLastExceptionResponse* response) { return this->GetLastException(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastException(
        ::grpc::MessageAllocator< ::g2config::GetLastExceptionRequest, ::g2config::GetLastExceptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::GetLastExceptionRequest, ::g2config::GetLastExceptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionRequest* /*request*/, ::g2config::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastException(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::GetLastExceptionRequest* /*request*/, ::g2config::GetLastExceptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::GetLastExceptionCodeRequest, ::g2config::GetLastExceptionCodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::GetLastExceptionCodeRequest* request, ::g2config::GetLastExceptionCodeResponse* response) { return this->GetLastExceptionCode(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastExceptionCode(
        ::grpc::MessageAllocator< ::g2config::GetLastExceptionCodeRequest, ::g2config::GetLastExceptionCodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::GetLastExceptionCodeRequest, ::g2config::GetLastExceptionCodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionCodeRequest* /*request*/, ::g2config::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastExceptionCode(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::GetLastExceptionCodeRequest* /*request*/, ::g2config::GetLastExceptionCodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Init() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::InitRequest, ::g2config::InitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::InitRequest* request, ::g2config::InitResponse* response) { return this->Init(context, request, response); }));}
    void SetMessageAllocatorFor_Init(
        ::grpc::MessageAllocator< ::g2config::InitRequest, ::g2config::InitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::InitRequest, ::g2config::InitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2config::InitRequest* /*request*/, ::g2config::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::InitRequest* /*request*/, ::g2config::InitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDataSources() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::ListDataSourcesRequest, ::g2config::ListDataSourcesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::ListDataSourcesRequest* request, ::g2config::ListDataSourcesResponse* response) { return this->ListDataSources(context, request, response); }));}
    void SetMessageAllocatorFor_ListDataSources(
        ::grpc::MessageAllocator< ::g2config::ListDataSourcesRequest, ::g2config::ListDataSourcesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::ListDataSourcesRequest, ::g2config::ListDataSourcesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::g2config::ListDataSourcesRequest* /*request*/, ::g2config::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDataSources(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::ListDataSourcesRequest* /*request*/, ::g2config::ListDataSourcesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Load() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::LoadRequest, ::g2config::LoadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::LoadRequest* request, ::g2config::LoadResponse* response) { return this->Load(context, request, response); }));}
    void SetMessageAllocatorFor_Load(
        ::grpc::MessageAllocator< ::g2config::LoadRequest, ::g2config::LoadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::LoadRequest, ::g2config::LoadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::g2config::LoadRequest* /*request*/, ::g2config::LoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Load(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::LoadRequest* /*request*/, ::g2config::LoadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Save() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::g2config::SaveRequest, ::g2config::SaveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2config::SaveRequest* request, ::g2config::SaveResponse* response) { return this->Save(context, request, response); }));}
    void SetMessageAllocatorFor_Save(
        ::grpc::MessageAllocator< ::g2config::SaveRequest, ::g2config::SaveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2config::SaveRequest, ::g2config::SaveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::g2config::SaveRequest* /*request*/, ::g2config::SaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Save(
      ::grpc::CallbackServerContext* /*context*/, const ::g2config::SaveRequest* /*request*/, ::g2config::SaveResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddDataSource<WithCallbackMethod_ClearLastException<WithCallbackMethod_Close<WithCallbackMethod_Create<WithCallbackMethod_DeleteDataSource<WithCallbackMethod_Destroy<WithCallbackMethod_GetLastException<WithCallbackMethod_GetLastExceptionCode<WithCallbackMethod_Init<WithCallbackMethod_ListDataSources<WithCallbackMethod_Load<WithCallbackMethod_Save<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddDataSource() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDataSource(::grpc::ServerContext* /*context*/, const ::g2config::AddDataSourceRequest* /*request*/, ::g2config::AddDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearLastException() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2config::ClearLastExceptionRequest* /*request*/, ::g2config::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Close() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::g2config::CloseRequest* /*request*/, ::g2config::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::g2config::CreateRequest* /*request*/, ::g2config::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDataSource() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataSource(::grpc::ServerContext* /*context*/, const ::g2config::DeleteDataSourceRequest* /*request*/, ::g2config::DeleteDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Destroy() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2config::DestroyRequest* /*request*/, ::g2config::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastException() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionRequest* /*request*/, ::g2config::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionCodeRequest* /*request*/, ::g2config::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2config::InitRequest* /*request*/, ::g2config::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDataSources() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::g2config::ListDataSourcesRequest* /*request*/, ::g2config::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Load() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::g2config::LoadRequest* /*request*/, ::g2config::LoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Save() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::g2config::SaveRequest* /*request*/, ::g2config::SaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddDataSource() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDataSource(::grpc::ServerContext* /*context*/, const ::g2config::AddDataSourceRequest* /*request*/, ::g2config::AddDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddDataSource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearLastException() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2config::ClearLastExceptionRequest* /*request*/, ::g2config::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearLastException(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Close() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::g2config::CloseRequest* /*request*/, ::g2config::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::g2config::CreateRequest* /*request*/, ::g2config::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDataSource() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataSource(::grpc::ServerContext* /*context*/, const ::g2config::DeleteDataSourceRequest* /*request*/, ::g2config::DeleteDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDataSource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Destroy() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2config::DestroyRequest* /*request*/, ::g2config::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastException() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionRequest* /*request*/, ::g2config::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastException(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionCodeRequest* /*request*/, ::g2config::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastExceptionCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2config::InitRequest* /*request*/, ::g2config::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDataSources() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::g2config::ListDataSourcesRequest* /*request*/, ::g2config::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDataSources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Load() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::g2config::LoadRequest* /*request*/, ::g2config::LoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoad(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Save() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::g2config::SaveRequest* /*request*/, ::g2config::SaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSave(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddDataSource() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddDataSource(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDataSource(::grpc::ServerContext* /*context*/, const ::g2config::AddDataSourceRequest* /*request*/, ::g2config::AddDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClearLastException() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearLastException(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2config::ClearLastExceptionRequest* /*request*/, ::g2config::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearLastException(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Close() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Close(context, request, response); }));
    }
    ~WithRawCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::g2config::CloseRequest* /*request*/, ::g2config::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::g2config::CreateRequest* /*request*/, ::g2config::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDataSource() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDataSource(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDataSource(::grpc::ServerContext* /*context*/, const ::g2config::DeleteDataSourceRequest* /*request*/, ::g2config::DeleteDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDataSource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Destroy() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2config::DestroyRequest* /*request*/, ::g2config::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLastException() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastException(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionRequest* /*request*/, ::g2config::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastException(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastExceptionCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionCodeRequest* /*request*/, ::g2config::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastExceptionCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Init() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Init(context, request, response); }));
    }
    ~WithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2config::InitRequest* /*request*/, ::g2config::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDataSources() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDataSources(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::g2config::ListDataSourcesRequest* /*request*/, ::g2config::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDataSources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Load() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Load(context, request, response); }));
    }
    ~WithRawCallbackMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::g2config::LoadRequest* /*request*/, ::g2config::LoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Load(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Save() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Save(context, request, response); }));
    }
    ~WithRawCallbackMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::g2config::SaveRequest* /*request*/, ::g2config::SaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Save(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddDataSource() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::AddDataSourceRequest, ::g2config::AddDataSourceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::AddDataSourceRequest, ::g2config::AddDataSourceResponse>* streamer) {
                       return this->StreamedAddDataSource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddDataSource(::grpc::ServerContext* /*context*/, const ::g2config::AddDataSourceRequest* /*request*/, ::g2config::AddDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddDataSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::AddDataSourceRequest,::g2config::AddDataSourceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearLastException() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::ClearLastExceptionRequest, ::g2config::ClearLastExceptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::ClearLastExceptionRequest, ::g2config::ClearLastExceptionResponse>* streamer) {
                       return this->StreamedClearLastException(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2config::ClearLastExceptionRequest* /*request*/, ::g2config::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearLastException(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::ClearLastExceptionRequest,::g2config::ClearLastExceptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Close() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::CloseRequest, ::g2config::CloseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::CloseRequest, ::g2config::CloseResponse>* streamer) {
                       return this->StreamedClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::g2config::CloseRequest* /*request*/, ::g2config::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::CloseRequest,::g2config::CloseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::CreateRequest, ::g2config::CreateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::CreateRequest, ::g2config::CreateResponse>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::g2config::CreateRequest* /*request*/, ::g2config::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::CreateRequest,::g2config::CreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDataSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDataSource() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::DeleteDataSourceRequest, ::g2config::DeleteDataSourceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::DeleteDataSourceRequest, ::g2config::DeleteDataSourceResponse>* streamer) {
                       return this->StreamedDeleteDataSource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDataSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDataSource(::grpc::ServerContext* /*context*/, const ::g2config::DeleteDataSourceRequest* /*request*/, ::g2config::DeleteDataSourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDataSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::DeleteDataSourceRequest,::g2config::DeleteDataSourceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Destroy() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::DestroyRequest, ::g2config::DestroyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::DestroyRequest, ::g2config::DestroyResponse>* streamer) {
                       return this->StreamedDestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2config::DestroyRequest* /*request*/, ::g2config::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::DestroyRequest,::g2config::DestroyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastException() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::GetLastExceptionRequest, ::g2config::GetLastExceptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::GetLastExceptionRequest, ::g2config::GetLastExceptionResponse>* streamer) {
                       return this->StreamedGetLastException(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionRequest* /*request*/, ::g2config::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastException(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::GetLastExceptionRequest,::g2config::GetLastExceptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::GetLastExceptionCodeRequest, ::g2config::GetLastExceptionCodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::GetLastExceptionCodeRequest, ::g2config::GetLastExceptionCodeResponse>* streamer) {
                       return this->StreamedGetLastExceptionCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2config::GetLastExceptionCodeRequest* /*request*/, ::g2config::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastExceptionCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::GetLastExceptionCodeRequest,::g2config::GetLastExceptionCodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::InitRequest, ::g2config::InitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::InitRequest, ::g2config::InitResponse>* streamer) {
                       return this->StreamedInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2config::InitRequest* /*request*/, ::g2config::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::InitRequest,::g2config::InitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDataSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDataSources() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::ListDataSourcesRequest, ::g2config::ListDataSourcesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::ListDataSourcesRequest, ::g2config::ListDataSourcesResponse>* streamer) {
                       return this->StreamedListDataSources(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDataSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDataSources(::grpc::ServerContext* /*context*/, const ::g2config::ListDataSourcesRequest* /*request*/, ::g2config::ListDataSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDataSources(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::ListDataSourcesRequest,::g2config::ListDataSourcesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Load() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::LoadRequest, ::g2config::LoadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::LoadRequest, ::g2config::LoadResponse>* streamer) {
                       return this->StreamedLoad(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::g2config::LoadRequest* /*request*/, ::g2config::LoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoad(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::LoadRequest,::g2config::LoadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Save() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2config::SaveRequest, ::g2config::SaveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2config::SaveRequest, ::g2config::SaveResponse>* streamer) {
                       return this->StreamedSave(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::g2config::SaveRequest* /*request*/, ::g2config::SaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2config::SaveRequest,::g2config::SaveResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddDataSource<WithStreamedUnaryMethod_ClearLastException<WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_DeleteDataSource<WithStreamedUnaryMethod_Destroy<WithStreamedUnaryMethod_GetLastException<WithStreamedUnaryMethod_GetLastExceptionCode<WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_ListDataSources<WithStreamedUnaryMethod_Load<WithStreamedUnaryMethod_Save<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddDataSource<WithStreamedUnaryMethod_ClearLastException<WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_DeleteDataSource<WithStreamedUnaryMethod_Destroy<WithStreamedUnaryMethod_GetLastException<WithStreamedUnaryMethod_GetLastExceptionCode<WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_ListDataSources<WithStreamedUnaryMethod_Load<WithStreamedUnaryMethod_Save<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace g2config


#endif  // GRPC_g2config_2eproto__INCLUDED
