// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: g2ssadm.proto

#include "g2ssadm.pb.h"
#include "g2ssadm.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace g2ssadm {

static const char* G2Diagnostic_method_names[] = {
  "/g2ssadm.G2Diagnostic/ClearLastException",
  "/g2ssadm.G2Diagnostic/CreateSaltInStore",
  "/g2ssadm.G2Diagnostic/Destroy",
  "/g2ssadm.G2Diagnostic/GetLastException",
  "/g2ssadm.G2Diagnostic/GetLastExceptionCode",
  "/g2ssadm.G2Diagnostic/Init",
  "/g2ssadm.G2Diagnostic/InitializeNewToken",
  "/g2ssadm.G2Diagnostic/List",
  "/g2ssadm.G2Diagnostic/Put",
  "/g2ssadm.G2Diagnostic/ReinitializeToken",
  "/g2ssadm.G2Diagnostic/SetupStore",
};

std::unique_ptr< G2Diagnostic::Stub> G2Diagnostic::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< G2Diagnostic::Stub> stub(new G2Diagnostic::Stub(channel, options));
  return stub;
}

G2Diagnostic::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ClearLastException_(G2Diagnostic_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSaltInStore_(G2Diagnostic_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(G2Diagnostic_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastException_(G2Diagnostic_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastExceptionCode_(G2Diagnostic_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Init_(G2Diagnostic_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitializeNewToken_(G2Diagnostic_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(G2Diagnostic_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Put_(G2Diagnostic_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReinitializeToken_(G2Diagnostic_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetupStore_(G2Diagnostic_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status G2Diagnostic::Stub::ClearLastException(::grpc::ClientContext* context, const ::g2ssadm::ClearLastExceptionRequest& request, ::g2ssadm::ClearLastExceptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::ClearLastExceptionRequest, ::g2ssadm::ClearLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearLastException_, context, request, response);
}

void G2Diagnostic::Stub::async::ClearLastException(::grpc::ClientContext* context, const ::g2ssadm::ClearLastExceptionRequest* request, ::g2ssadm::ClearLastExceptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::ClearLastExceptionRequest, ::g2ssadm::ClearLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearLastException_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::ClearLastException(::grpc::ClientContext* context, const ::g2ssadm::ClearLastExceptionRequest* request, ::g2ssadm::ClearLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearLastException_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::ClearLastExceptionResponse>* G2Diagnostic::Stub::PrepareAsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2ssadm::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::ClearLastExceptionResponse, ::g2ssadm::ClearLastExceptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearLastException_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::ClearLastExceptionResponse>* G2Diagnostic::Stub::AsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2ssadm::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearLastExceptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::CreateSaltInStore(::grpc::ClientContext* context, const ::g2ssadm::CreateSaltInStoreRequest& request, ::g2ssadm::CreateSaltInStoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::CreateSaltInStoreRequest, ::g2ssadm::CreateSaltInStoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSaltInStore_, context, request, response);
}

void G2Diagnostic::Stub::async::CreateSaltInStore(::grpc::ClientContext* context, const ::g2ssadm::CreateSaltInStoreRequest* request, ::g2ssadm::CreateSaltInStoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::CreateSaltInStoreRequest, ::g2ssadm::CreateSaltInStoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSaltInStore_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::CreateSaltInStore(::grpc::ClientContext* context, const ::g2ssadm::CreateSaltInStoreRequest* request, ::g2ssadm::CreateSaltInStoreResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSaltInStore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::CreateSaltInStoreResponse>* G2Diagnostic::Stub::PrepareAsyncCreateSaltInStoreRaw(::grpc::ClientContext* context, const ::g2ssadm::CreateSaltInStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::CreateSaltInStoreResponse, ::g2ssadm::CreateSaltInStoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSaltInStore_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::CreateSaltInStoreResponse>* G2Diagnostic::Stub::AsyncCreateSaltInStoreRaw(::grpc::ClientContext* context, const ::g2ssadm::CreateSaltInStoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSaltInStoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::Destroy(::grpc::ClientContext* context, const ::g2ssadm::DestroyRequest& request, ::g2ssadm::DestroyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::DestroyRequest, ::g2ssadm::DestroyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void G2Diagnostic::Stub::async::Destroy(::grpc::ClientContext* context, const ::g2ssadm::DestroyRequest* request, ::g2ssadm::DestroyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::DestroyRequest, ::g2ssadm::DestroyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::Destroy(::grpc::ClientContext* context, const ::g2ssadm::DestroyRequest* request, ::g2ssadm::DestroyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::DestroyResponse>* G2Diagnostic::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::g2ssadm::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::DestroyResponse, ::g2ssadm::DestroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::DestroyResponse>* G2Diagnostic::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::g2ssadm::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::GetLastException(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionRequest& request, ::g2ssadm::GetLastExceptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::GetLastExceptionRequest, ::g2ssadm::GetLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLastException_, context, request, response);
}

void G2Diagnostic::Stub::async::GetLastException(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionRequest* request, ::g2ssadm::GetLastExceptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::GetLastExceptionRequest, ::g2ssadm::GetLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastException_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::GetLastException(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionRequest* request, ::g2ssadm::GetLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastException_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::GetLastExceptionResponse>* G2Diagnostic::Stub::PrepareAsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::GetLastExceptionResponse, ::g2ssadm::GetLastExceptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLastException_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::GetLastExceptionResponse>* G2Diagnostic::Stub::AsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLastExceptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::GetLastExceptionCode(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionCodeRequest& request, ::g2ssadm::GetLastExceptionCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::GetLastExceptionCodeRequest, ::g2ssadm::GetLastExceptionCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLastExceptionCode_, context, request, response);
}

void G2Diagnostic::Stub::async::GetLastExceptionCode(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionCodeRequest* request, ::g2ssadm::GetLastExceptionCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::GetLastExceptionCodeRequest, ::g2ssadm::GetLastExceptionCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastExceptionCode_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::GetLastExceptionCode(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionCodeRequest* request, ::g2ssadm::GetLastExceptionCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastExceptionCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::GetLastExceptionCodeResponse>* G2Diagnostic::Stub::PrepareAsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::GetLastExceptionCodeResponse, ::g2ssadm::GetLastExceptionCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLastExceptionCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::GetLastExceptionCodeResponse>* G2Diagnostic::Stub::AsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2ssadm::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLastExceptionCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::Init(::grpc::ClientContext* context, const ::g2ssadm::InitRequest& request, ::g2ssadm::InitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::InitRequest, ::g2ssadm::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void G2Diagnostic::Stub::async::Init(::grpc::ClientContext* context, const ::g2ssadm::InitRequest* request, ::g2ssadm::InitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::InitRequest, ::g2ssadm::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::Init(::grpc::ClientContext* context, const ::g2ssadm::InitRequest* request, ::g2ssadm::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::InitResponse>* G2Diagnostic::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::g2ssadm::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::InitResponse, ::g2ssadm::InitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::InitResponse>* G2Diagnostic::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::g2ssadm::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::InitializeNewToken(::grpc::ClientContext* context, const ::g2ssadm::InitializeNewTokenRequest& request, ::g2ssadm::InitializeNewTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::InitializeNewTokenRequest, ::g2ssadm::InitializeNewTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitializeNewToken_, context, request, response);
}

void G2Diagnostic::Stub::async::InitializeNewToken(::grpc::ClientContext* context, const ::g2ssadm::InitializeNewTokenRequest* request, ::g2ssadm::InitializeNewTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::InitializeNewTokenRequest, ::g2ssadm::InitializeNewTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitializeNewToken_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::InitializeNewToken(::grpc::ClientContext* context, const ::g2ssadm::InitializeNewTokenRequest* request, ::g2ssadm::InitializeNewTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitializeNewToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::InitializeNewTokenResponse>* G2Diagnostic::Stub::PrepareAsyncInitializeNewTokenRaw(::grpc::ClientContext* context, const ::g2ssadm::InitializeNewTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::InitializeNewTokenResponse, ::g2ssadm::InitializeNewTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitializeNewToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::InitializeNewTokenResponse>* G2Diagnostic::Stub::AsyncInitializeNewTokenRaw(::grpc::ClientContext* context, const ::g2ssadm::InitializeNewTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitializeNewTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::List(::grpc::ClientContext* context, const ::g2ssadm::ListRequest& request, ::g2ssadm::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::ListRequest, ::g2ssadm::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void G2Diagnostic::Stub::async::List(::grpc::ClientContext* context, const ::g2ssadm::ListRequest* request, ::g2ssadm::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::ListRequest, ::g2ssadm::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::List(::grpc::ClientContext* context, const ::g2ssadm::ListRequest* request, ::g2ssadm::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::ListResponse>* G2Diagnostic::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::g2ssadm::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::ListResponse, ::g2ssadm::ListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::ListResponse>* G2Diagnostic::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::g2ssadm::ListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::Put(::grpc::ClientContext* context, const ::g2ssadm::PutRequest& request, ::g2ssadm::PutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::PutRequest, ::g2ssadm::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Put_, context, request, response);
}

void G2Diagnostic::Stub::async::Put(::grpc::ClientContext* context, const ::g2ssadm::PutRequest* request, ::g2ssadm::PutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::PutRequest, ::g2ssadm::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::Put(::grpc::ClientContext* context, const ::g2ssadm::PutRequest* request, ::g2ssadm::PutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::PutResponse>* G2Diagnostic::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::g2ssadm::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::PutResponse, ::g2ssadm::PutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::PutResponse>* G2Diagnostic::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::g2ssadm::PutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::ReinitializeToken(::grpc::ClientContext* context, const ::g2ssadm::ReinitializeTokenRequest& request, ::g2ssadm::ReinitializeTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::ReinitializeTokenRequest, ::g2ssadm::ReinitializeTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReinitializeToken_, context, request, response);
}

void G2Diagnostic::Stub::async::ReinitializeToken(::grpc::ClientContext* context, const ::g2ssadm::ReinitializeTokenRequest* request, ::g2ssadm::ReinitializeTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::ReinitializeTokenRequest, ::g2ssadm::ReinitializeTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReinitializeToken_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::ReinitializeToken(::grpc::ClientContext* context, const ::g2ssadm::ReinitializeTokenRequest* request, ::g2ssadm::ReinitializeTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReinitializeToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::ReinitializeTokenResponse>* G2Diagnostic::Stub::PrepareAsyncReinitializeTokenRaw(::grpc::ClientContext* context, const ::g2ssadm::ReinitializeTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::ReinitializeTokenResponse, ::g2ssadm::ReinitializeTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReinitializeToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::ReinitializeTokenResponse>* G2Diagnostic::Stub::AsyncReinitializeTokenRaw(::grpc::ClientContext* context, const ::g2ssadm::ReinitializeTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReinitializeTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::SetupStore(::grpc::ClientContext* context, const ::g2ssadm::SetupStoreRequest& request, ::g2ssadm::SetupStoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2ssadm::SetupStoreRequest, ::g2ssadm::SetupStoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetupStore_, context, request, response);
}

void G2Diagnostic::Stub::async::SetupStore(::grpc::ClientContext* context, const ::g2ssadm::SetupStoreRequest* request, ::g2ssadm::SetupStoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2ssadm::SetupStoreRequest, ::g2ssadm::SetupStoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupStore_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::SetupStore(::grpc::ClientContext* context, const ::g2ssadm::SetupStoreRequest* request, ::g2ssadm::SetupStoreResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupStore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::SetupStoreResponse>* G2Diagnostic::Stub::PrepareAsyncSetupStoreRaw(::grpc::ClientContext* context, const ::g2ssadm::SetupStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2ssadm::SetupStoreResponse, ::g2ssadm::SetupStoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetupStore_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2ssadm::SetupStoreResponse>* G2Diagnostic::Stub::AsyncSetupStoreRaw(::grpc::ClientContext* context, const ::g2ssadm::SetupStoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetupStoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

G2Diagnostic::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::ClearLastExceptionRequest, ::g2ssadm::ClearLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::ClearLastExceptionRequest* req,
             ::g2ssadm::ClearLastExceptionResponse* resp) {
               return service->ClearLastException(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::CreateSaltInStoreRequest, ::g2ssadm::CreateSaltInStoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::CreateSaltInStoreRequest* req,
             ::g2ssadm::CreateSaltInStoreResponse* resp) {
               return service->CreateSaltInStore(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::DestroyRequest, ::g2ssadm::DestroyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::DestroyRequest* req,
             ::g2ssadm::DestroyResponse* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::GetLastExceptionRequest, ::g2ssadm::GetLastExceptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::GetLastExceptionRequest* req,
             ::g2ssadm::GetLastExceptionResponse* resp) {
               return service->GetLastException(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::GetLastExceptionCodeRequest, ::g2ssadm::GetLastExceptionCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::GetLastExceptionCodeRequest* req,
             ::g2ssadm::GetLastExceptionCodeResponse* resp) {
               return service->GetLastExceptionCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::InitRequest, ::g2ssadm::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::InitRequest* req,
             ::g2ssadm::InitResponse* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::InitializeNewTokenRequest, ::g2ssadm::InitializeNewTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::InitializeNewTokenRequest* req,
             ::g2ssadm::InitializeNewTokenResponse* resp) {
               return service->InitializeNewToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::ListRequest, ::g2ssadm::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::ListRequest* req,
             ::g2ssadm::ListResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::PutRequest, ::g2ssadm::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::PutRequest* req,
             ::g2ssadm::PutResponse* resp) {
               return service->Put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::ReinitializeTokenRequest, ::g2ssadm::ReinitializeTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::ReinitializeTokenRequest* req,
             ::g2ssadm::ReinitializeTokenResponse* resp) {
               return service->ReinitializeToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2ssadm::SetupStoreRequest, ::g2ssadm::SetupStoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2ssadm::SetupStoreRequest* req,
             ::g2ssadm::SetupStoreResponse* resp) {
               return service->SetupStore(ctx, req, resp);
             }, this)));
}

G2Diagnostic::Service::~Service() {
}

::grpc::Status G2Diagnostic::Service::ClearLastException(::grpc::ServerContext* context, const ::g2ssadm::ClearLastExceptionRequest* request, ::g2ssadm::ClearLastExceptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::CreateSaltInStore(::grpc::ServerContext* context, const ::g2ssadm::CreateSaltInStoreRequest* request, ::g2ssadm::CreateSaltInStoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::Destroy(::grpc::ServerContext* context, const ::g2ssadm::DestroyRequest* request, ::g2ssadm::DestroyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::GetLastException(::grpc::ServerContext* context, const ::g2ssadm::GetLastExceptionRequest* request, ::g2ssadm::GetLastExceptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::GetLastExceptionCode(::grpc::ServerContext* context, const ::g2ssadm::GetLastExceptionCodeRequest* request, ::g2ssadm::GetLastExceptionCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::Init(::grpc::ServerContext* context, const ::g2ssadm::InitRequest* request, ::g2ssadm::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::InitializeNewToken(::grpc::ServerContext* context, const ::g2ssadm::InitializeNewTokenRequest* request, ::g2ssadm::InitializeNewTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::List(::grpc::ServerContext* context, const ::g2ssadm::ListRequest* request, ::g2ssadm::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::Put(::grpc::ServerContext* context, const ::g2ssadm::PutRequest* request, ::g2ssadm::PutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::ReinitializeToken(::grpc::ServerContext* context, const ::g2ssadm::ReinitializeTokenRequest* request, ::g2ssadm::ReinitializeTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::SetupStore(::grpc::ServerContext* context, const ::g2ssadm::SetupStoreRequest* request, ::g2ssadm::SetupStoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace g2ssadm

