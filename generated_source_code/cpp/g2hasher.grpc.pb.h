// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: g2hasher.proto
#ifndef GRPC_g2hasher_2eproto__INCLUDED
#define GRPC_g2hasher_2eproto__INCLUDED

#include "g2hasher.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace g2hasher {

class G2Diagnostic final {
 public:
  static constexpr char const* service_full_name() {
    return "g2hasher.G2Diagnostic";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::g2hasher::ClearLastExceptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ClearLastExceptionResponse>> AsyncClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ClearLastExceptionResponse>>(AsyncClearLastExceptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ClearLastExceptionResponse>> PrepareAsyncClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ClearLastExceptionResponse>>(PrepareAsyncClearLastExceptionRaw(context, request, cq));
    }
    virtual ::grpc::Status Destroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::g2hasher::DestroyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::DestroyResponse>> AsyncDestroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::DestroyResponse>>(AsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::DestroyResponse>> PrepareAsyncDestroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::DestroyResponse>>(PrepareAsyncDestroyRaw(context, request, cq));
    }
    virtual ::grpc::Status ExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::g2hasher::ExportTokenLibraryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ExportTokenLibraryResponse>> AsyncExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ExportTokenLibraryResponse>>(AsyncExportTokenLibraryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ExportTokenLibraryResponse>> PrepareAsyncExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ExportTokenLibraryResponse>>(PrepareAsyncExportTokenLibraryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::g2hasher::GetLastExceptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionResponse>> AsyncGetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionResponse>>(AsyncGetLastExceptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionResponse>> PrepareAsyncGetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionResponse>>(PrepareAsyncGetLastExceptionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::g2hasher::GetLastExceptionCodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionCodeResponse>> AsyncGetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionCodeResponse>>(AsyncGetLastExceptionCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionCodeResponse>> PrepareAsyncGetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionCodeResponse>>(PrepareAsyncGetLastExceptionCodeRaw(context, request, cq));
    }
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::g2hasher::InitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    virtual ::grpc::Status InitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::g2hasher::InitWithConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitWithConfigResponse>> AsyncInitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitWithConfigResponse>>(AsyncInitWithConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitWithConfigResponse>> PrepareAsyncInitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitWithConfigResponse>>(PrepareAsyncInitWithConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status Process(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::g2hasher::ProcessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ProcessResponse>> AsyncProcess(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ProcessResponse>>(AsyncProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ProcessResponse>> PrepareAsyncProcess(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ProcessResponse>>(PrepareAsyncProcessRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest* request, ::g2hasher::ClearLastExceptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest* request, ::g2hasher::ClearLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Destroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest* request, ::g2hasher::DestroyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Destroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest* request, ::g2hasher::DestroyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest* request, ::g2hasher::ExportTokenLibraryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest* request, ::g2hasher::ExportTokenLibraryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest* request, ::g2hasher::GetLastExceptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest* request, ::g2hasher::GetLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest* request, ::g2hasher::GetLastExceptionCodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest* request, ::g2hasher::GetLastExceptionCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::g2hasher::InitRequest* request, ::g2hasher::InitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::g2hasher::InitRequest* request, ::g2hasher::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest* request, ::g2hasher::InitWithConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest* request, ::g2hasher::InitWithConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Process(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest* request, ::g2hasher::ProcessResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Process(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest* request, ::g2hasher::ProcessResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ClearLastExceptionResponse>* AsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ClearLastExceptionResponse>* PrepareAsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::DestroyResponse>* AsyncDestroyRaw(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::DestroyResponse>* PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ExportTokenLibraryResponse>* AsyncExportTokenLibraryRaw(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ExportTokenLibraryResponse>* PrepareAsyncExportTokenLibraryRaw(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionResponse>* AsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionResponse>* PrepareAsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionCodeResponse>* AsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::GetLastExceptionCodeResponse>* PrepareAsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitWithConfigResponse>* AsyncInitWithConfigRaw(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::InitWithConfigResponse>* PrepareAsyncInitWithConfigRaw(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ProcessResponse>* AsyncProcessRaw(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g2hasher::ProcessResponse>* PrepareAsyncProcessRaw(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::g2hasher::ClearLastExceptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ClearLastExceptionResponse>> AsyncClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ClearLastExceptionResponse>>(AsyncClearLastExceptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ClearLastExceptionResponse>> PrepareAsyncClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ClearLastExceptionResponse>>(PrepareAsyncClearLastExceptionRaw(context, request, cq));
    }
    ::grpc::Status Destroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::g2hasher::DestroyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::DestroyResponse>> AsyncDestroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::DestroyResponse>>(AsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::DestroyResponse>> PrepareAsyncDestroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::DestroyResponse>>(PrepareAsyncDestroyRaw(context, request, cq));
    }
    ::grpc::Status ExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::g2hasher::ExportTokenLibraryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ExportTokenLibraryResponse>> AsyncExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ExportTokenLibraryResponse>>(AsyncExportTokenLibraryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ExportTokenLibraryResponse>> PrepareAsyncExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ExportTokenLibraryResponse>>(PrepareAsyncExportTokenLibraryRaw(context, request, cq));
    }
    ::grpc::Status GetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::g2hasher::GetLastExceptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionResponse>> AsyncGetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionResponse>>(AsyncGetLastExceptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionResponse>> PrepareAsyncGetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionResponse>>(PrepareAsyncGetLastExceptionRaw(context, request, cq));
    }
    ::grpc::Status GetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::g2hasher::GetLastExceptionCodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionCodeResponse>> AsyncGetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionCodeResponse>>(AsyncGetLastExceptionCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionCodeResponse>> PrepareAsyncGetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionCodeResponse>>(PrepareAsyncGetLastExceptionCodeRaw(context, request, cq));
    }
    ::grpc::Status Init(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::g2hasher::InitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    ::grpc::Status InitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::g2hasher::InitWithConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::InitWithConfigResponse>> AsyncInitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::InitWithConfigResponse>>(AsyncInitWithConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::InitWithConfigResponse>> PrepareAsyncInitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::InitWithConfigResponse>>(PrepareAsyncInitWithConfigRaw(context, request, cq));
    }
    ::grpc::Status Process(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::g2hasher::ProcessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ProcessResponse>> AsyncProcess(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ProcessResponse>>(AsyncProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ProcessResponse>> PrepareAsyncProcess(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g2hasher::ProcessResponse>>(PrepareAsyncProcessRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest* request, ::g2hasher::ClearLastExceptionResponse* response, std::function<void(::grpc::Status)>) override;
      void ClearLastException(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest* request, ::g2hasher::ClearLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Destroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest* request, ::g2hasher::DestroyResponse* response, std::function<void(::grpc::Status)>) override;
      void Destroy(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest* request, ::g2hasher::DestroyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest* request, ::g2hasher::ExportTokenLibraryResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportTokenLibrary(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest* request, ::g2hasher::ExportTokenLibraryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest* request, ::g2hasher::GetLastExceptionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLastException(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest* request, ::g2hasher::GetLastExceptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest* request, ::g2hasher::GetLastExceptionCodeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLastExceptionCode(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest* request, ::g2hasher::GetLastExceptionCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Init(::grpc::ClientContext* context, const ::g2hasher::InitRequest* request, ::g2hasher::InitResponse* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::g2hasher::InitRequest* request, ::g2hasher::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest* request, ::g2hasher::InitWithConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void InitWithConfig(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest* request, ::g2hasher::InitWithConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Process(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest* request, ::g2hasher::ProcessResponse* response, std::function<void(::grpc::Status)>) override;
      void Process(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest* request, ::g2hasher::ProcessResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::g2hasher::ClearLastExceptionResponse>* AsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::ClearLastExceptionResponse>* PrepareAsyncClearLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::ClearLastExceptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::DestroyResponse>* AsyncDestroyRaw(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::DestroyResponse>* PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::g2hasher::DestroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::ExportTokenLibraryResponse>* AsyncExportTokenLibraryRaw(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::ExportTokenLibraryResponse>* PrepareAsyncExportTokenLibraryRaw(::grpc::ClientContext* context, const ::g2hasher::ExportTokenLibraryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionResponse>* AsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionResponse>* PrepareAsyncGetLastExceptionRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionCodeResponse>* AsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::GetLastExceptionCodeResponse>* PrepareAsyncGetLastExceptionCodeRaw(::grpc::ClientContext* context, const ::g2hasher::GetLastExceptionCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::g2hasher::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::InitWithConfigResponse>* AsyncInitWithConfigRaw(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::InitWithConfigResponse>* PrepareAsyncInitWithConfigRaw(::grpc::ClientContext* context, const ::g2hasher::InitWithConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::ProcessResponse>* AsyncProcessRaw(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g2hasher::ProcessResponse>* PrepareAsyncProcessRaw(::grpc::ClientContext* context, const ::g2hasher::ProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ClearLastException_;
    const ::grpc::internal::RpcMethod rpcmethod_Destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportTokenLibrary_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastException_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastExceptionCode_;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
    const ::grpc::internal::RpcMethod rpcmethod_InitWithConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_Process_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ClearLastException(::grpc::ServerContext* context, const ::g2hasher::ClearLastExceptionRequest* request, ::g2hasher::ClearLastExceptionResponse* response);
    virtual ::grpc::Status Destroy(::grpc::ServerContext* context, const ::g2hasher::DestroyRequest* request, ::g2hasher::DestroyResponse* response);
    virtual ::grpc::Status ExportTokenLibrary(::grpc::ServerContext* context, const ::g2hasher::ExportTokenLibraryRequest* request, ::g2hasher::ExportTokenLibraryResponse* response);
    virtual ::grpc::Status GetLastException(::grpc::ServerContext* context, const ::g2hasher::GetLastExceptionRequest* request, ::g2hasher::GetLastExceptionResponse* response);
    virtual ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* context, const ::g2hasher::GetLastExceptionCodeRequest* request, ::g2hasher::GetLastExceptionCodeResponse* response);
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::g2hasher::InitRequest* request, ::g2hasher::InitResponse* response);
    virtual ::grpc::Status InitWithConfig(::grpc::ServerContext* context, const ::g2hasher::InitWithConfigRequest* request, ::g2hasher::InitWithConfigResponse* response);
    virtual ::grpc::Status Process(::grpc::ServerContext* context, const ::g2hasher::ProcessRequest* request, ::g2hasher::ProcessResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearLastException() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::ClearLastExceptionRequest* /*request*/, ::g2hasher::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearLastException(::grpc::ServerContext* context, ::g2hasher::ClearLastExceptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2hasher::ClearLastExceptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Destroy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2hasher::DestroyRequest* /*request*/, ::g2hasher::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroy(::grpc::ServerContext* context, ::g2hasher::DestroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2hasher::DestroyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportTokenLibrary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportTokenLibrary() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ExportTokenLibrary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportTokenLibrary(::grpc::ServerContext* /*context*/, const ::g2hasher::ExportTokenLibraryRequest* /*request*/, ::g2hasher::ExportTokenLibraryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportTokenLibrary(::grpc::ServerContext* context, ::g2hasher::ExportTokenLibraryRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2hasher::ExportTokenLibraryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastException() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionRequest* /*request*/, ::g2hasher::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastException(::grpc::ServerContext* context, ::g2hasher::GetLastExceptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2hasher::GetLastExceptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionCodeRequest* /*request*/, ::g2hasher::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastExceptionCode(::grpc::ServerContext* context, ::g2hasher::GetLastExceptionCodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2hasher::GetLastExceptionCodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2hasher::InitRequest* /*request*/, ::g2hasher::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::g2hasher::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2hasher::InitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InitWithConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitWithConfig() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_InitWithConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWithConfig(::grpc::ServerContext* /*context*/, const ::g2hasher::InitWithConfigRequest* /*request*/, ::g2hasher::InitWithConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitWithConfig(::grpc::ServerContext* context, ::g2hasher::InitWithConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2hasher::InitWithConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Process() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Process(::grpc::ServerContext* /*context*/, const ::g2hasher::ProcessRequest* /*request*/, ::g2hasher::ProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcess(::grpc::ServerContext* context, ::g2hasher::ProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::g2hasher::ProcessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ClearLastException<WithAsyncMethod_Destroy<WithAsyncMethod_ExportTokenLibrary<WithAsyncMethod_GetLastException<WithAsyncMethod_GetLastExceptionCode<WithAsyncMethod_Init<WithAsyncMethod_InitWithConfig<WithAsyncMethod_Process<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClearLastException() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::g2hasher::ClearLastExceptionRequest, ::g2hasher::ClearLastExceptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2hasher::ClearLastExceptionRequest* request, ::g2hasher::ClearLastExceptionResponse* response) { return this->ClearLastException(context, request, response); }));}
    void SetMessageAllocatorFor_ClearLastException(
        ::grpc::MessageAllocator< ::g2hasher::ClearLastExceptionRequest, ::g2hasher::ClearLastExceptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2hasher::ClearLastExceptionRequest, ::g2hasher::ClearLastExceptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::ClearLastExceptionRequest* /*request*/, ::g2hasher::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearLastException(
      ::grpc::CallbackServerContext* /*context*/, const ::g2hasher::ClearLastExceptionRequest* /*request*/, ::g2hasher::ClearLastExceptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Destroy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::g2hasher::DestroyRequest, ::g2hasher::DestroyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2hasher::DestroyRequest* request, ::g2hasher::DestroyResponse* response) { return this->Destroy(context, request, response); }));}
    void SetMessageAllocatorFor_Destroy(
        ::grpc::MessageAllocator< ::g2hasher::DestroyRequest, ::g2hasher::DestroyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2hasher::DestroyRequest, ::g2hasher::DestroyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2hasher::DestroyRequest* /*request*/, ::g2hasher::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::g2hasher::DestroyRequest* /*request*/, ::g2hasher::DestroyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportTokenLibrary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportTokenLibrary() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::g2hasher::ExportTokenLibraryRequest, ::g2hasher::ExportTokenLibraryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2hasher::ExportTokenLibraryRequest* request, ::g2hasher::ExportTokenLibraryResponse* response) { return this->ExportTokenLibrary(context, request, response); }));}
    void SetMessageAllocatorFor_ExportTokenLibrary(
        ::grpc::MessageAllocator< ::g2hasher::ExportTokenLibraryRequest, ::g2hasher::ExportTokenLibraryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2hasher::ExportTokenLibraryRequest, ::g2hasher::ExportTokenLibraryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportTokenLibrary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportTokenLibrary(::grpc::ServerContext* /*context*/, const ::g2hasher::ExportTokenLibraryRequest* /*request*/, ::g2hasher::ExportTokenLibraryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportTokenLibrary(
      ::grpc::CallbackServerContext* /*context*/, const ::g2hasher::ExportTokenLibraryRequest* /*request*/, ::g2hasher::ExportTokenLibraryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLastException() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::g2hasher::GetLastExceptionRequest, ::g2hasher::GetLastExceptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2hasher::GetLastExceptionRequest* request, ::g2hasher::GetLastExceptionResponse* response) { return this->GetLastException(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastException(
        ::grpc::MessageAllocator< ::g2hasher::GetLastExceptionRequest, ::g2hasher::GetLastExceptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2hasher::GetLastExceptionRequest, ::g2hasher::GetLastExceptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionRequest* /*request*/, ::g2hasher::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastException(
      ::grpc::CallbackServerContext* /*context*/, const ::g2hasher::GetLastExceptionRequest* /*request*/, ::g2hasher::GetLastExceptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::g2hasher::GetLastExceptionCodeRequest, ::g2hasher::GetLastExceptionCodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2hasher::GetLastExceptionCodeRequest* request, ::g2hasher::GetLastExceptionCodeResponse* response) { return this->GetLastExceptionCode(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastExceptionCode(
        ::grpc::MessageAllocator< ::g2hasher::GetLastExceptionCodeRequest, ::g2hasher::GetLastExceptionCodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2hasher::GetLastExceptionCodeRequest, ::g2hasher::GetLastExceptionCodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionCodeRequest* /*request*/, ::g2hasher::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastExceptionCode(
      ::grpc::CallbackServerContext* /*context*/, const ::g2hasher::GetLastExceptionCodeRequest* /*request*/, ::g2hasher::GetLastExceptionCodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Init() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::g2hasher::InitRequest, ::g2hasher::InitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2hasher::InitRequest* request, ::g2hasher::InitResponse* response) { return this->Init(context, request, response); }));}
    void SetMessageAllocatorFor_Init(
        ::grpc::MessageAllocator< ::g2hasher::InitRequest, ::g2hasher::InitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2hasher::InitRequest, ::g2hasher::InitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2hasher::InitRequest* /*request*/, ::g2hasher::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::g2hasher::InitRequest* /*request*/, ::g2hasher::InitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InitWithConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitWithConfig() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::g2hasher::InitWithConfigRequest, ::g2hasher::InitWithConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2hasher::InitWithConfigRequest* request, ::g2hasher::InitWithConfigResponse* response) { return this->InitWithConfig(context, request, response); }));}
    void SetMessageAllocatorFor_InitWithConfig(
        ::grpc::MessageAllocator< ::g2hasher::InitWithConfigRequest, ::g2hasher::InitWithConfigResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2hasher::InitWithConfigRequest, ::g2hasher::InitWithConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitWithConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWithConfig(::grpc::ServerContext* /*context*/, const ::g2hasher::InitWithConfigRequest* /*request*/, ::g2hasher::InitWithConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitWithConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::g2hasher::InitWithConfigRequest* /*request*/, ::g2hasher::InitWithConfigResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Process() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::g2hasher::ProcessRequest, ::g2hasher::ProcessResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::g2hasher::ProcessRequest* request, ::g2hasher::ProcessResponse* response) { return this->Process(context, request, response); }));}
    void SetMessageAllocatorFor_Process(
        ::grpc::MessageAllocator< ::g2hasher::ProcessRequest, ::g2hasher::ProcessResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g2hasher::ProcessRequest, ::g2hasher::ProcessResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Process(::grpc::ServerContext* /*context*/, const ::g2hasher::ProcessRequest* /*request*/, ::g2hasher::ProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Process(
      ::grpc::CallbackServerContext* /*context*/, const ::g2hasher::ProcessRequest* /*request*/, ::g2hasher::ProcessResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ClearLastException<WithCallbackMethod_Destroy<WithCallbackMethod_ExportTokenLibrary<WithCallbackMethod_GetLastException<WithCallbackMethod_GetLastExceptionCode<WithCallbackMethod_Init<WithCallbackMethod_InitWithConfig<WithCallbackMethod_Process<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearLastException() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::ClearLastExceptionRequest* /*request*/, ::g2hasher::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Destroy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2hasher::DestroyRequest* /*request*/, ::g2hasher::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportTokenLibrary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportTokenLibrary() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ExportTokenLibrary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportTokenLibrary(::grpc::ServerContext* /*context*/, const ::g2hasher::ExportTokenLibraryRequest* /*request*/, ::g2hasher::ExportTokenLibraryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastException() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionRequest* /*request*/, ::g2hasher::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionCodeRequest* /*request*/, ::g2hasher::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2hasher::InitRequest* /*request*/, ::g2hasher::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InitWithConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitWithConfig() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_InitWithConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWithConfig(::grpc::ServerContext* /*context*/, const ::g2hasher::InitWithConfigRequest* /*request*/, ::g2hasher::InitWithConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Process() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Process(::grpc::ServerContext* /*context*/, const ::g2hasher::ProcessRequest* /*request*/, ::g2hasher::ProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearLastException() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::ClearLastExceptionRequest* /*request*/, ::g2hasher::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearLastException(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Destroy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2hasher::DestroyRequest* /*request*/, ::g2hasher::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportTokenLibrary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportTokenLibrary() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ExportTokenLibrary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportTokenLibrary(::grpc::ServerContext* /*context*/, const ::g2hasher::ExportTokenLibraryRequest* /*request*/, ::g2hasher::ExportTokenLibraryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportTokenLibrary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastException() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionRequest* /*request*/, ::g2hasher::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastException(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionCodeRequest* /*request*/, ::g2hasher::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastExceptionCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2hasher::InitRequest* /*request*/, ::g2hasher::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitWithConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitWithConfig() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_InitWithConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWithConfig(::grpc::ServerContext* /*context*/, const ::g2hasher::InitWithConfigRequest* /*request*/, ::g2hasher::InitWithConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitWithConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Process() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Process(::grpc::ServerContext* /*context*/, const ::g2hasher::ProcessRequest* /*request*/, ::g2hasher::ProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClearLastException() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearLastException(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::ClearLastExceptionRequest* /*request*/, ::g2hasher::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearLastException(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Destroy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2hasher::DestroyRequest* /*request*/, ::g2hasher::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportTokenLibrary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportTokenLibrary() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportTokenLibrary(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportTokenLibrary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportTokenLibrary(::grpc::ServerContext* /*context*/, const ::g2hasher::ExportTokenLibraryRequest* /*request*/, ::g2hasher::ExportTokenLibraryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportTokenLibrary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLastException() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastException(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionRequest* /*request*/, ::g2hasher::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastException(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastExceptionCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionCodeRequest* /*request*/, ::g2hasher::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastExceptionCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Init() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Init(context, request, response); }));
    }
    ~WithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2hasher::InitRequest* /*request*/, ::g2hasher::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitWithConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitWithConfig() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitWithConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitWithConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWithConfig(::grpc::ServerContext* /*context*/, const ::g2hasher::InitWithConfigRequest* /*request*/, ::g2hasher::InitWithConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitWithConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Process() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Process(context, request, response); }));
    }
    ~WithRawCallbackMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Process(::grpc::ServerContext* /*context*/, const ::g2hasher::ProcessRequest* /*request*/, ::g2hasher::ProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Process(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearLastException() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2hasher::ClearLastExceptionRequest, ::g2hasher::ClearLastExceptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2hasher::ClearLastExceptionRequest, ::g2hasher::ClearLastExceptionResponse>* streamer) {
                       return this->StreamedClearLastException(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::ClearLastExceptionRequest* /*request*/, ::g2hasher::ClearLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearLastException(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2hasher::ClearLastExceptionRequest,::g2hasher::ClearLastExceptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Destroy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2hasher::DestroyRequest, ::g2hasher::DestroyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2hasher::DestroyRequest, ::g2hasher::DestroyResponse>* streamer) {
                       return this->StreamedDestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::g2hasher::DestroyRequest* /*request*/, ::g2hasher::DestroyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2hasher::DestroyRequest,::g2hasher::DestroyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportTokenLibrary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportTokenLibrary() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2hasher::ExportTokenLibraryRequest, ::g2hasher::ExportTokenLibraryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2hasher::ExportTokenLibraryRequest, ::g2hasher::ExportTokenLibraryResponse>* streamer) {
                       return this->StreamedExportTokenLibrary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportTokenLibrary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportTokenLibrary(::grpc::ServerContext* /*context*/, const ::g2hasher::ExportTokenLibraryRequest* /*request*/, ::g2hasher::ExportTokenLibraryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportTokenLibrary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2hasher::ExportTokenLibraryRequest,::g2hasher::ExportTokenLibraryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastException : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastException() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2hasher::GetLastExceptionRequest, ::g2hasher::GetLastExceptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2hasher::GetLastExceptionRequest, ::g2hasher::GetLastExceptionResponse>* streamer) {
                       return this->StreamedGetLastException(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastException() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastException(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionRequest* /*request*/, ::g2hasher::GetLastExceptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastException(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2hasher::GetLastExceptionRequest,::g2hasher::GetLastExceptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastExceptionCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastExceptionCode() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2hasher::GetLastExceptionCodeRequest, ::g2hasher::GetLastExceptionCodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2hasher::GetLastExceptionCodeRequest, ::g2hasher::GetLastExceptionCodeResponse>* streamer) {
                       return this->StreamedGetLastExceptionCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastExceptionCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastExceptionCode(::grpc::ServerContext* /*context*/, const ::g2hasher::GetLastExceptionCodeRequest* /*request*/, ::g2hasher::GetLastExceptionCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastExceptionCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2hasher::GetLastExceptionCodeRequest,::g2hasher::GetLastExceptionCodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2hasher::InitRequest, ::g2hasher::InitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2hasher::InitRequest, ::g2hasher::InitResponse>* streamer) {
                       return this->StreamedInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::g2hasher::InitRequest* /*request*/, ::g2hasher::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2hasher::InitRequest,::g2hasher::InitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitWithConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitWithConfig() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2hasher::InitWithConfigRequest, ::g2hasher::InitWithConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2hasher::InitWithConfigRequest, ::g2hasher::InitWithConfigResponse>* streamer) {
                       return this->StreamedInitWithConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitWithConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitWithConfig(::grpc::ServerContext* /*context*/, const ::g2hasher::InitWithConfigRequest* /*request*/, ::g2hasher::InitWithConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitWithConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2hasher::InitWithConfigRequest,::g2hasher::InitWithConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Process() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::g2hasher::ProcessRequest, ::g2hasher::ProcessResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::g2hasher::ProcessRequest, ::g2hasher::ProcessResponse>* streamer) {
                       return this->StreamedProcess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Process(::grpc::ServerContext* /*context*/, const ::g2hasher::ProcessRequest* /*request*/, ::g2hasher::ProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g2hasher::ProcessRequest,::g2hasher::ProcessResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ClearLastException<WithStreamedUnaryMethod_Destroy<WithStreamedUnaryMethod_ExportTokenLibrary<WithStreamedUnaryMethod_GetLastException<WithStreamedUnaryMethod_GetLastExceptionCode<WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_InitWithConfig<WithStreamedUnaryMethod_Process<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ClearLastException<WithStreamedUnaryMethod_Destroy<WithStreamedUnaryMethod_ExportTokenLibrary<WithStreamedUnaryMethod_GetLastException<WithStreamedUnaryMethod_GetLastExceptionCode<WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_InitWithConfig<WithStreamedUnaryMethod_Process<Service > > > > > > > > StreamedService;
};

}  // namespace g2hasher


#endif  // GRPC_g2hasher_2eproto__INCLUDED
